//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Q41.DocumentService.TemplateManager.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Q88DocumentServiceTestEntities : DbContext
    {
        public Q88DocumentServiceTestEntities()
            : base("name=Q88DocumentServiceTestEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ConnectionStrings> ConnectionStrings { get; set; }
        public DbSet<ProcedureCalls> ProcedureCalls { get; set; }
        public DbSet<TemplateDataSources> TemplateDataSources { get; set; }
        public DbSet<TemplateGroups> TemplateGroups { get; set; }
        public DbSet<Templates> Templates { get; set; }
        public DbSet<vwBazaStore> vwBazaStore { get; set; }
        public DbSet<vwProcedureCalls> vwProcedureCalls { get; set; }
        public DbSet<vwStore> vwStore { get; set; }
        public DbSet<vwTemplateGroupTemplate> vwTemplateGroupTemplate { get; set; }
        public DbSet<vwMapiranja> vwMapiranja { get; set; }
        public DbSet<vwTemplates> vwTemplates { get; set; }
    
        public virtual int spBrisanjeMapiranogPolja(string identifier, string polje)
        {
            var identifierParameter = identifier != null ?
                new ObjectParameter("Identifier", identifier) :
                new ObjectParameter("Identifier", typeof(string));
    
            var poljeParameter = polje != null ?
                new ObjectParameter("Polje", polje) :
                new ObjectParameter("Polje", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBrisanjeMapiranogPolja", identifierParameter, poljeParameter);
        }
    
        public virtual int spBrisanjeMapiranogPoljaById(Nullable<int> id, string polje)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var poljeParameter = polje != null ?
                new ObjectParameter("Polje", polje) :
                new ObjectParameter("Polje", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBrisanjeMapiranogPoljaById", idParameter, poljeParameter);
        }
    
        public virtual int spDodavanjeMapiranogPolja(string identifier, string polje)
        {
            var identifierParameter = identifier != null ?
                new ObjectParameter("Identifier", identifier) :
                new ObjectParameter("Identifier", typeof(string));
    
            var poljeParameter = polje != null ?
                new ObjectParameter("Polje", polje) :
                new ObjectParameter("Polje", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDodavanjeMapiranogPolja", identifierParameter, poljeParameter);
        }
    
        public virtual int spDodavanjeMapiranogPoljaById(Nullable<int> id, string polje)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var poljeParameter = polje != null ?
                new ObjectParameter("Polje", polje) :
                new ObjectParameter("Polje", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDodavanjeMapiranogPoljaById", idParameter, poljeParameter);
        }
    
        public virtual int spProcedureCallsBrisanjeParametra(string procedureName, string parametar, string cursor)
        {
            var procedureNameParameter = procedureName != null ?
                new ObjectParameter("ProcedureName", procedureName) :
                new ObjectParameter("ProcedureName", typeof(string));
    
            var parametarParameter = parametar != null ?
                new ObjectParameter("Parametar", parametar) :
                new ObjectParameter("Parametar", typeof(string));
    
            var cursorParameter = cursor != null ?
                new ObjectParameter("Cursor", cursor) :
                new ObjectParameter("Cursor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProcedureCallsBrisanjeParametra", procedureNameParameter, parametarParameter, cursorParameter);
        }
    
        public virtual int spProcedureCallsDodavanjeParametra(string procedureName, string parametar, string cursor)
        {
            var procedureNameParameter = procedureName != null ?
                new ObjectParameter("ProcedureName", procedureName) :
                new ObjectParameter("ProcedureName", typeof(string));
    
            var parametarParameter = parametar != null ?
                new ObjectParameter("Parametar", parametar) :
                new ObjectParameter("Parametar", typeof(string));
    
            var cursorParameter = cursor != null ?
                new ObjectParameter("Cursor", cursor) :
                new ObjectParameter("Cursor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProcedureCallsDodavanjeParametra", procedureNameParameter, parametarParameter, cursorParameter);
        }
    
        public virtual int spProcedureCallsDodavanjeParametraById(Nullable<int> procedureCallId, string parametar, string cursor)
        {
            var procedureCallIdParameter = procedureCallId.HasValue ?
                new ObjectParameter("procedureCallId", procedureCallId) :
                new ObjectParameter("procedureCallId", typeof(int));
    
            var parametarParameter = parametar != null ?
                new ObjectParameter("Parametar", parametar) :
                new ObjectParameter("Parametar", typeof(string));
    
            var cursorParameter = cursor != null ?
                new ObjectParameter("Cursor", cursor) :
                new ObjectParameter("Cursor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProcedureCallsDodavanjeParametraById", procedureCallIdParameter, parametarParameter, cursorParameter);
        }
    
        public virtual int spTemplatesParametersBrisanjeParametra(string identifier, string parametarName, string table)
        {
            var identifierParameter = identifier != null ?
                new ObjectParameter("Identifier", identifier) :
                new ObjectParameter("Identifier", typeof(string));
    
            var parametarNameParameter = parametarName != null ?
                new ObjectParameter("ParametarName", parametarName) :
                new ObjectParameter("ParametarName", typeof(string));
    
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTemplatesParametersBrisanjeParametra", identifierParameter, parametarNameParameter, tableParameter);
        }
    
        public virtual int spTemplatesParametersDodavanjeParametra(string identifier, string parametarName, string table, string parametarType, string parametarRequired)
        {
            var identifierParameter = identifier != null ?
                new ObjectParameter("Identifier", identifier) :
                new ObjectParameter("Identifier", typeof(string));
    
            var parametarNameParameter = parametarName != null ?
                new ObjectParameter("ParametarName", parametarName) :
                new ObjectParameter("ParametarName", typeof(string));
    
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));
    
            var parametarTypeParameter = parametarType != null ?
                new ObjectParameter("ParametarType", parametarType) :
                new ObjectParameter("ParametarType", typeof(string));
    
            var parametarRequiredParameter = parametarRequired != null ?
                new ObjectParameter("ParametarRequired", parametarRequired) :
                new ObjectParameter("ParametarRequired", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTemplatesParametersDodavanjeParametra", identifierParameter, parametarNameParameter, tableParameter, parametarTypeParameter, parametarRequiredParameter);
        }
    
        public virtual ObjectResult<spPartialParametriMapiranja_Result> spPartialParametriMapiranja(Nullable<int> templateDataSourceId)
        {
            var templateDataSourceIdParameter = templateDataSourceId.HasValue ?
                new ObjectParameter("TemplateDataSourceId", templateDataSourceId) :
                new ObjectParameter("TemplateDataSourceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPartialParametriMapiranja_Result>("spPartialParametriMapiranja", templateDataSourceIdParameter);
        }
    
        public virtual ObjectResult<spPartialParametriPredloska_Result> spPartialParametriPredloska(Nullable<int> templateId)
        {
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("TemplateId", templateId) :
                new ObjectParameter("TemplateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPartialParametriPredloska_Result>("spPartialParametriPredloska", templateIdParameter);
        }
    
        public virtual ObjectResult<spPartialParametriProcedure_Result> spPartialParametriProcedure(Nullable<int> procedureCallId)
        {
            var procedureCallIdParameter = procedureCallId.HasValue ?
                new ObjectParameter("ProcedureCallId", procedureCallId) :
                new ObjectParameter("ProcedureCallId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPartialParametriProcedure_Result>("spPartialParametriProcedure", procedureCallIdParameter);
        }
    
        public virtual ObjectResult<spProcedureCallSelectByProcedureName_Result> spProcedureCallSelectByProcedureName(string procedureName)
        {
            var procedureNameParameter = procedureName != null ?
                new ObjectParameter("ProcedureName", procedureName) :
                new ObjectParameter("ProcedureName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProcedureCallSelectByProcedureName_Result>("spProcedureCallSelectByProcedureName", procedureNameParameter);
        }
    
        public virtual int spSinkronizirajPredlozakSaStorom(Nullable<int> templateId, Nullable<int> procedureCallId, ObjectParameter brojPovezanih)
        {
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("TemplateId", templateId) :
                new ObjectParameter("TemplateId", typeof(int));
    
            var procedureCallIdParameter = procedureCallId.HasValue ?
                new ObjectParameter("ProcedureCallId", procedureCallId) :
                new ObjectParameter("ProcedureCallId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSinkronizirajPredlozakSaStorom", templateIdParameter, procedureCallIdParameter, brojPovezanih);
        }
    
        public virtual int TemplateDataSourceDelete(Nullable<int> templateDataSourceId)
        {
            var templateDataSourceIdParameter = templateDataSourceId.HasValue ?
                new ObjectParameter("TemplateDataSourceId", templateDataSourceId) :
                new ObjectParameter("TemplateDataSourceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TemplateDataSourceDelete", templateDataSourceIdParameter);
        }
    
        public virtual int TemplateDataSourceDeleteByTemplateID(Nullable<int> templateId)
        {
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("TemplateId", templateId) :
                new ObjectParameter("TemplateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TemplateDataSourceDeleteByTemplateID", templateIdParameter);
        }
    
        public virtual ObjectResult<TemplateDataSourceSelect_Result> TemplateDataSourceSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TemplateDataSourceSelect_Result>("TemplateDataSourceSelect");
        }
    
        public virtual int TemplateDataSourceUpsert(ObjectParameter templateDataSourceId, Nullable<int> templateId, Nullable<int> procedureCallId, string templateFields, string paramaterMappings, string fieldsMappings)
        {
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("TemplateId", templateId) :
                new ObjectParameter("TemplateId", typeof(int));
    
            var procedureCallIdParameter = procedureCallId.HasValue ?
                new ObjectParameter("ProcedureCallId", procedureCallId) :
                new ObjectParameter("ProcedureCallId", typeof(int));
    
            var templateFieldsParameter = templateFields != null ?
                new ObjectParameter("TemplateFields", templateFields) :
                new ObjectParameter("TemplateFields", typeof(string));
    
            var paramaterMappingsParameter = paramaterMappings != null ?
                new ObjectParameter("ParamaterMappings", paramaterMappings) :
                new ObjectParameter("ParamaterMappings", typeof(string));
    
            var fieldsMappingsParameter = fieldsMappings != null ?
                new ObjectParameter("FieldsMappings", fieldsMappings) :
                new ObjectParameter("FieldsMappings", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TemplateDataSourceUpsert", templateDataSourceId, templateIdParameter, procedureCallIdParameter, templateFieldsParameter, paramaterMappingsParameter, fieldsMappingsParameter);
        }
    
        public virtual int TemplateDelete(Nullable<int> templateId)
        {
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("TemplateId", templateId) :
                new ObjectParameter("TemplateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TemplateDelete", templateIdParameter);
        }
    
        public virtual int TemplateGroupDelete(Nullable<int> templateGroupId)
        {
            var templateGroupIdParameter = templateGroupId.HasValue ?
                new ObjectParameter("TemplateGroupId", templateGroupId) :
                new ObjectParameter("TemplateGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TemplateGroupDelete", templateGroupIdParameter);
        }
    
        public virtual ObjectResult<TemplateGroupHierarchySelect_Result> TemplateGroupHierarchySelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TemplateGroupHierarchySelect_Result>("TemplateGroupHierarchySelect");
        }
    
        public virtual int TemplateGroups_punjenje_podacima()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TemplateGroups_punjenje_podacima");
        }
    
        public virtual ObjectResult<TemplateGroupSelect_Result> TemplateGroupSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TemplateGroupSelect_Result>("TemplateGroupSelect");
        }
    
        public virtual ObjectResult<Nullable<int>> TemplateGroupUpsert(ObjectParameter templateGroupId, string name, Nullable<int> parentGroupId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var parentGroupIdParameter = parentGroupId.HasValue ?
                new ObjectParameter("ParentGroupId", parentGroupId) :
                new ObjectParameter("ParentGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TemplateGroupUpsert", templateGroupId, nameParameter, parentGroupIdParameter);
        }
    
        public virtual ObjectResult<TemplateSelect_Result> TemplateSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TemplateSelect_Result>("TemplateSelect");
        }
    
        public virtual int TemplateSelectByID(Nullable<int> templateId)
        {
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("TemplateId", templateId) :
                new ObjectParameter("TemplateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TemplateSelectByID", templateIdParameter);
        }
    
        public virtual int TemplateSelectByIdentifier(string identifier)
        {
            var identifierParameter = identifier != null ?
                new ObjectParameter("Identifier", identifier) :
                new ObjectParameter("Identifier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TemplateSelectByIdentifier", identifierParameter);
        }
    
        public virtual ObjectResult<string> TemplateUpload(Nullable<int> templateId)
        {
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("TemplateId", templateId) :
                new ObjectParameter("TemplateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TemplateUpload", templateIdParameter);
        }
    
        public virtual ObjectResult<TemplateUploadFolder_Result> TemplateUploadFolder(string folder, ObjectParameter templateId)
        {
            var folderParameter = folder != null ?
                new ObjectParameter("folder", folder) :
                new ObjectParameter("folder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TemplateUploadFolder_Result>("TemplateUploadFolder", folderParameter, templateId);
        }
    
        public virtual ObjectResult<Nullable<int>> TemplateUpsert(ObjectParameter templateId, string name, string identifier, string path, Nullable<int> templateGroupId, string paramaters, ObjectParameter templateDataSourceId, Nullable<int> procedureCallId, string templateFields, string paramaterMappings, string fieldsMappings)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var identifierParameter = identifier != null ?
                new ObjectParameter("Identifier", identifier) :
                new ObjectParameter("Identifier", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var templateGroupIdParameter = templateGroupId.HasValue ?
                new ObjectParameter("TemplateGroupId", templateGroupId) :
                new ObjectParameter("TemplateGroupId", typeof(int));
    
            var paramatersParameter = paramaters != null ?
                new ObjectParameter("Paramaters", paramaters) :
                new ObjectParameter("Paramaters", typeof(string));
    
            var procedureCallIdParameter = procedureCallId.HasValue ?
                new ObjectParameter("ProcedureCallId", procedureCallId) :
                new ObjectParameter("ProcedureCallId", typeof(int));
    
            var templateFieldsParameter = templateFields != null ?
                new ObjectParameter("TemplateFields", templateFields) :
                new ObjectParameter("TemplateFields", typeof(string));
    
            var paramaterMappingsParameter = paramaterMappings != null ?
                new ObjectParameter("ParamaterMappings", paramaterMappings) :
                new ObjectParameter("ParamaterMappings", typeof(string));
    
            var fieldsMappingsParameter = fieldsMappings != null ?
                new ObjectParameter("FieldsMappings", fieldsMappings) :
                new ObjectParameter("FieldsMappings", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TemplateUpsert", templateId, nameParameter, identifierParameter, pathParameter, templateGroupIdParameter, paramatersParameter, templateDataSourceId, procedureCallIdParameter, templateFieldsParameter, paramaterMappingsParameter, fieldsMappingsParameter);
        }
    
        public virtual ObjectResult<spPopisParametara_Result> spPopisParametara(Nullable<int> procedureCallId)
        {
            var procedureCallIdParameter = procedureCallId.HasValue ?
                new ObjectParameter("ProcedureCallId", procedureCallId) :
                new ObjectParameter("ProcedureCallId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPopisParametara_Result>("spPopisParametara", procedureCallIdParameter);
        }
    
        public virtual ObjectResult<spPopisPolja_Result> spPopisPolja(Nullable<int> templateId)
        {
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("TemplateId", templateId) :
                new ObjectParameter("TemplateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPopisPolja_Result>("spPopisPolja", templateIdParameter);
        }
    }
}
